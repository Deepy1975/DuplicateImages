stages:
  - test
  - publish

include:
  - template: Code-Quality.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml

.test:
  stage: test
  image: python:3.9
  before_script:
    - pip install -q poetry
    - poetry install

pytest:
  extends: .test
  script:
    - poetry run pytest --junitxml=pytest.xml
  artifacts:
    reports:
      junit:
        - pytest.xml

mypy:
  extends: .test
  script:
    - poetry run mypy duplicate_images tests

flake8:
  extends: .test
  script:
    - poetry run flake8 duplicate_images tests

pylint:
  extends: .test
  script:
    - poetry run pylint duplicate_images tests

TestRunScript:
  extends: .test
  variables:
    IMAGE_DIR: tests/integration/data/equal_but_binary_different
  script:
    - NUM_FILES=$(find $IMAGE_DIR -type f | wc -l)
    - EXPECTED_PAIRS=$((NUM_FILES*(NUM_FILES-1)/2))
    - NUM_PAIRS=$(poetry run find-dups $IMAGE_DIR | wc -l)
    - test $NUM_PAIRS -eq $EXPECTED_PAIRS
    - NUM_PAIRS=$(poetry run find-dups $IMAGE_DIR --progress --quiet | wc -l)
    - test $NUM_PAIRS -eq $EXPECTED_PAIRS
    - NUM_PAIRS=$(poetry run find-dups $IMAGE_DIR --algorithm ahash --quiet | wc -l)
    - test $NUM_PAIRS -eq $EXPECTED_PAIRS
    - NUM_PAIRS=$(poetry run find-dups $IMAGE_DIR --max-distance 1 --quiet | wc -l)
    - test $NUM_PAIRS -eq $EXPECTED_PAIRS
    - NUM_PAIRS=$(poetry run find-dups $IMAGE_DIR --hash-size 8 --quiet | wc -l)
    - test $NUM_PAIRS -eq $EXPECTED_PAIRS

TagIsNew:
  stage: test
  image: alpine:latest
  rules:
    - if: "$CI_MERGE_REQUEST_ID"
    - if: $CI_COMMIT_BRANCH == "master"
  before_script:
    - apk update
    - apk add git
  script:
    - VERSION=$(egrep 'version = ".*"' pyproject.toml | cut -d \" -f 2)
    - test -n "$VERSION"
    - git tag | ( ! grep "^${VERSION}\$" )

CreateTag:
  stage: publish
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule"
      when: on_success
  needs:
    - TagIsNew
  before_script:
    - apk update
    - apk add git
    - git config user.email "${GITLAB_USER_EMAIL}"
    - git config user.name "${GITLAB_USER_NAME}"
  script:
    - VERSION=$(egrep 'version = ".*"' pyproject.toml | cut -d \" -f 2)
    - echo "**** Tagging release as version $VERSION"
    - git remote add tag-origin https://oauth2:${GITLAB_ACCESS_TOKEN}@gitlab.com/${CI_PROJECT_PATH}
    - git tag -a "${VERSION}" -m "Released $(date +%Y-%m-%d)"
    - git push tag-origin "${VERSION}"

PublishToPyPI:
  stage: publish
  image: python:latest
  rules:
    - if: "$CI_COMMIT_TAG"
      when: on_success
  script:
    - VERSION=$(egrep 'version = ".*"' pyproject.toml | cut -d \" -f 2)
    - test "${CI_COMMIT_TAG}" == "${VERSION}" || exit 1
    - echo "**** Upgrading to ${VERSION}"
    - pip install -q poetry
    - poetry build
    - poetry config repositories.testpypi https://test.pypi.org/legacy/
    - poetry publish --username ${PYPI_USERNAME} --password ${PYPI_PASSWORD} --repository testpypi
    - echo "**** Attempting pip install from test PyPI server"
    - apt-get -y -qq update
    - apt-get -y -q install libsndfile1 ffmpeg > /dev/null
    - pip install -q --index-url https://test.pypi.org/simple --extra-index-url https://pypi.org/simple duplicate_images
    - echo "**** Publishing on live PyPI server"
    - poetry publish --username ${PYPI_USERNAME} --password ${PYPI_PASSWORD}

PushToGithub:
  stage: publish
  image: alpine:latest
  rules:
    - if: "$CI_COMMIT_TAG"
      when: on_success
  before_script:
    - apk update
    - apk add openssh-client git sshpass
    - eval $(ssh-agent -s)
    - echo "$GITHUB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - ssh -T git@github.com 2>&1 || true
    - git config user.email "${GITLAB_USER_EMAIL}"
    - git config user.name "${GITLAB_USER_NAME}"
  script:
    - git remote add github git@github.com:lene/DuplicateImages.git
    - git remote show github
    - BRANCH=${CI_COMMIT_BRANCH:-master}
    - git checkout $BRANCH
    - git push github $BRANCH
    - git push github $CI_COMMIT_TAG
