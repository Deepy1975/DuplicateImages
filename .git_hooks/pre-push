#!/bin/sh

# Run the test suite before pushing to remote, so the GitLab CI fails less
# often
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# If the log message starts with "WIP:" (work in progress) the push is allowed
# even if the tests fail, since it might be necessary to push to share between
# work environments.

GITLAB_PROJECT_ID=6643206
CI_LINT_OUTPUT=/tmp/gitlab-ci-lint.json
RED_TEXT='\e[38;5;196m'
GREEN_TEXT='\e[38;5;46m'
RESET_TEXT='\e[0m'
STATUS=0

poetry run pytest -n auto tests/unit || STATUS=1
poetry run pytest -n auto tests/integration || STATUS=1
poetry run mypy duplicate_images tests || STATUS=1
poetry run flake8 duplicate_images tests || STATUS=1
poetry run pylint duplicate_images tests || STATUS=1
poetry run bandit -r duplicate_images -q || STATUS=1

# lint GitLab CI (nod to https://stackoverflow.com/questions/49090675/how-can-i-test-gitlab-ci-yml#68723161 )
if [ "$GITLAB_ACCESS_TOKEN" != "" ]; then
    rm -f "$CI_LINT_OUTPUT"
    jq --null-input --arg yaml "$(cat .gitlab-ci.yml)" '{ content: $yaml }' | \
      curl -s "https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_ID}/ci/lint" \
        --header 'Content-Type: application/json' \
        --header "PRIVATE-TOKEN: $GITLAB_ACCESS_TOKEN" \
        --data @- > "$CI_LINT_OUTPUT"
    VALID=$(jq -r .valid < "$CI_LINT_OUTPUT")
    if [ "$VALID" = "true" ]; then
        echo "GitLab CI valid: ${GREEN_TEXT}$VALID${RESET_TEXT}"
    else
        echo "GitLab CI valid: ${RED_TEXT}$VALID${RESET_TEXT}"
        echo "errors: $(jq .errors < "$CI_LINT_OUTPUT")"
        echo "warnings: $(jq .warnings < "$CI_LINT_OUTPUT")"
    fi
	#rm -f "$CI_LINT_OUTPUT"
else
    echo "\$GITLAB_ACCESS_TOKEN not set"
fi

# check Changelog is updated
VERSION=$(egrep 'version = ".*"' pyproject.toml | cut -d \" -f 2)
if test -z "$VERSION"
then echo "${RED_TEXT}version not found in pyproject.toml${RESET_TEXT}"; STATUS=1
else
  echo "${GREEN_TEXT}Version $VERSION${RESET_TEXT}"
  if ! grep -q "$VERSION" CHANGELOG.md
  then echo "${RED_TEXT}$VERSION not found in changelog${RESET_TEXT}"; STATUS=1
  else echo "${GREEN_TEXT}$VERSION found in CHANGELOG.md, cool${RESET_TEXT}"
  fi
  if ! fgrep -q "...$VERSION" CHANGELOG.md
  then echo "${RED_TEXT}link to $VERSION diff not found in changelog${RESET_TEXT}"; STATUS=1
  else echo "${GREEN_TEXT}link to $VERSION diff found in CHANGELOG.md, cool${RESET_TEXT}"
  fi
  if ! fgrep -q "## [$VERSION] - $(date +%Y-%m-%d)" CHANGELOG.md
  then echo "${RED_TEXT}date not set correctly in changelog${RESET_TEXT}"; STATUS=1
  else echo "${GREEN_TEXT}date in CHANGELOG.md is $(date +%Y-%m-%d), cool${RESET_TEXT}"
  fi
fi

if [ $STATUS -gt 0 ]; then
  commitmsg=$(git log --oneline | head -n 1 | cut -d' ' -f 2-)
  if echo "$commitmsg" | grep '^WIP:'; then
    echo >&2 "Found WIP commit, pushing in spite of failed test suite"
    STATUS=0
  fi
fi
if [ $STATUS -gt 0 ]
then echo "Status: ${RED_TEXT}${STATUS}${RESET_TEXT}"
else echo "Status: ${GREEN_TEXT}${STATUS}${RESET_TEXT}"
fi
exit $STATUS
